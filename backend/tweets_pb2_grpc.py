# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tweets_pb2 as tweets__pb2


class MessageSenderStub(object):
  """The message sending service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendMessage = channel.unary_stream(
        '/tweets.MessageSender/SendMessage',
        request_serializer=tweets__pb2.RequestMessage.SerializeToString,
        response_deserializer=tweets__pb2.ResponseMessage.FromString,
        )


class MessageSenderServicer(object):
  """The message sending service definition.
  """

  def SendMessage(self, request, context):
    """Sends a message
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MessageSenderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendMessage': grpc.unary_stream_rpc_method_handler(
          servicer.SendMessage,
          request_deserializer=tweets__pb2.RequestMessage.FromString,
          response_serializer=tweets__pb2.ResponseMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tweets.MessageSender', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
